
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BOLEE BREAK COLON COMMA CONTINUE DIVIDE DO DOT DOUBLE ELSE END FOR IDENTIFIER IF INTEGER LPAREN MENEE MINUS MULTIPLY NOT NUMBER OR PLUS PROGRAM RPAREN SEMICOLON THEN TO VAR WHILE WRITE XORprogram : PROGRAM SEMICOLON bodybody :\n            | body sbody fbodysbody : var variablesvar  : VARvariables : perem types perem : IDENTIFIER\n            | IDENTIFIER COMMA peremtypes : COLON INTEGER SEMICOLON\n            | COLON DOUBLE SEMICOLON fbody : BEGIN pascalbody END DOT pascalbody : pascalline pascalcolons pascalbody\n            | pascalline pascalcolonspascalcolons : SEMICOLON\n                 | pascalcolons SEMICOLONpascalline : assign\n                | func\n                | expression\n                | WRITE argsassign : IDENTIFIER ASSIGN exprexpression : for\n                  | if\n                  | while expr : fact\n            | expr PLUS fact\n            | expr MINUS fact\n        fact : term\n            | fact MULTIPLY term\n            | fact DIVIDE termterm : arg\n            | LPAREN expr RPARENfunc : IDENTIFIER LPAREN args RPARENargs :\n            | expr\n            | args COMMA exprarg : NUMBER\n            | IDENTIFIER\n            | func\n            | NOTfor : FOR IDENTIFIER ASSIGN NUMBER TO NUMBER DO BEGIN function END if : IF arg operand arg THEN BEGIN function else END  else :\n                | ELSE function while : WHILE arg operand arg DO BEGIN function END operand : AND\n                | XOR\n                | OR\n                | BOLEE\n                | MENEE function : assign SEMICOLON\n                | func SEMICOLON\n                | expression SEMICOLON\n                | WRITE args SEMICOLON\n                | assign SEMICOLON function\n                | func SEMICOLON function\n                | expression SEMICOLON function\n                | WRITE args SEMICOLON function\n                | BREAK SEMICOLON\n                | CONTINUE SEMICOLON'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,4,8,50,],[0,-2,-1,-3,-11,]),'SEMICOLON':([2,14,15,16,17,18,20,21,22,30,31,32,33,34,35,36,38,39,40,41,47,48,52,59,71,72,73,74,75,76,77,89,90,91,92,93,94,102,105,107,113,],[3,31,-16,-17,-18,-33,-21,-22,-23,52,-14,-19,-34,-24,-27,-30,-36,-37,-38,-39,69,70,-15,-20,-35,-25,-26,-28,-29,-31,-32,99,100,101,-33,103,104,112,-44,-41,-40,]),'VAR':([3,4,8,50,],[-2,7,-3,-11,]),'BEGIN':([5,10,26,69,70,82,83,87,],[9,-4,-6,-9,-10,85,86,96,]),'IDENTIFIER':([6,7,9,18,23,24,25,28,30,31,37,42,43,52,53,54,55,56,57,62,63,64,65,66,67,68,85,86,92,96,98,99,100,101,112,],[12,-5,19,39,44,39,39,12,19,-14,39,39,39,-15,39,39,39,39,39,39,-45,-46,-47,-48,-49,39,19,19,39,19,19,19,19,19,19,]),'WRITE':([9,30,31,52,85,86,96,98,99,100,101,112,],[18,18,-14,-15,92,92,92,92,92,92,92,92,]),'FOR':([9,30,31,52,85,86,96,98,99,100,101,112,],[23,23,-14,-15,23,23,23,23,23,23,23,23,]),'IF':([9,30,31,52,85,86,96,98,99,100,101,112,],[24,24,-14,-15,24,24,24,24,24,24,24,24,]),'WHILE':([9,30,31,52,85,86,96,98,99,100,101,112,],[25,25,-14,-15,25,25,25,25,25,25,25,25,]),'COLON':([11,12,49,],[27,-7,-8,]),'COMMA':([12,18,32,33,34,35,36,38,39,40,41,43,60,71,72,73,74,75,76,77,92,102,],[28,-33,53,-34,-24,-27,-30,-36,-37,-38,-39,-33,53,-35,-25,-26,-28,-29,-31,-32,-33,53,]),'END':([13,30,31,51,52,88,95,97,99,100,101,103,104,106,108,109,110,111,112,114,],[29,-13,-14,-12,-15,-42,105,107,-50,-51,-52,-58,-59,113,-43,-54,-55,-56,-53,-57,]),'LPAREN':([18,19,37,39,42,43,53,54,55,56,57,92,],[37,43,37,43,37,37,37,37,37,37,37,37,]),'NUMBER':([18,24,25,37,42,43,53,54,55,56,57,61,62,63,64,65,66,67,68,81,92,],[38,38,38,38,38,38,38,38,38,38,38,78,38,-45,-46,-47,-48,-49,38,84,38,]),'NOT':([18,24,25,37,42,43,53,54,55,56,57,62,63,64,65,66,67,68,92,],[41,41,41,41,41,41,41,41,41,41,41,41,-45,-46,-47,-48,-49,41,41,]),'ASSIGN':([19,44,],[42,61,]),'INTEGER':([27,],[47,]),'DOUBLE':([27,],[48,]),'DOT':([29,],[50,]),'RPAREN':([33,34,35,36,38,39,40,41,43,58,60,71,72,73,74,75,76,77,],[-34,-24,-27,-30,-36,-37,-38,-39,-33,76,77,-35,-25,-26,-28,-29,-31,-32,]),'PLUS':([33,34,35,36,38,39,40,41,58,59,71,72,73,74,75,76,77,],[54,-24,-27,-30,-36,-37,-38,-39,54,54,54,-25,-26,-28,-29,-31,-32,]),'MINUS':([33,34,35,36,38,39,40,41,58,59,71,72,73,74,75,76,77,],[55,-24,-27,-30,-36,-37,-38,-39,55,55,55,-25,-26,-28,-29,-31,-32,]),'MULTIPLY':([34,35,36,38,39,40,41,72,73,74,75,76,77,],[56,-27,-30,-36,-37,-38,-39,56,56,-28,-29,-31,-32,]),'DIVIDE':([34,35,36,38,39,40,41,72,73,74,75,76,77,],[57,-27,-30,-36,-37,-38,-39,57,57,-28,-29,-31,-32,]),'AND':([38,39,40,41,45,46,77,],[-36,-37,-38,-39,63,63,-32,]),'XOR':([38,39,40,41,45,46,77,],[-36,-37,-38,-39,64,64,-32,]),'OR':([38,39,40,41,45,46,77,],[-36,-37,-38,-39,65,65,-32,]),'BOLEE':([38,39,40,41,45,46,77,],[-36,-37,-38,-39,66,66,-32,]),'MENEE':([38,39,40,41,45,46,77,],[-36,-37,-38,-39,67,67,-32,]),'THEN':([38,39,40,41,77,79,],[-36,-37,-38,-39,-32,82,]),'DO':([38,39,40,41,77,80,84,],[-36,-37,-38,-39,-32,83,87,]),'TO':([78,],[81,]),'BREAK':([85,86,96,98,99,100,101,112,],[93,93,93,93,93,93,93,93,]),'CONTINUE':([85,86,96,98,99,100,101,112,],[94,94,94,94,94,94,94,94,]),'ELSE':([88,99,100,101,103,104,109,110,111,112,114,],[98,-50,-51,-52,-58,-59,-54,-55,-56,-53,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([3,],[4,]),'sbody':([4,],[5,]),'var':([4,],[6,]),'fbody':([5,],[8,]),'variables':([6,],[10,]),'perem':([6,28,],[11,49,]),'pascalbody':([9,30,],[13,51,]),'pascalline':([9,30,],[14,14,]),'assign':([9,30,85,86,96,98,99,100,101,112,],[15,15,89,89,89,89,89,89,89,89,]),'func':([9,18,24,25,30,37,42,43,53,54,55,56,57,62,68,85,86,92,96,98,99,100,101,112,],[16,40,40,40,16,40,40,40,40,40,40,40,40,40,40,90,90,40,90,90,90,90,90,90,]),'expression':([9,30,85,86,96,98,99,100,101,112,],[17,17,91,91,91,91,91,91,91,91,]),'for':([9,30,85,86,96,98,99,100,101,112,],[20,20,20,20,20,20,20,20,20,20,]),'if':([9,30,85,86,96,98,99,100,101,112,],[21,21,21,21,21,21,21,21,21,21,]),'while':([9,30,85,86,96,98,99,100,101,112,],[22,22,22,22,22,22,22,22,22,22,]),'types':([11,],[26,]),'pascalcolons':([14,],[30,]),'args':([18,43,92,],[32,60,102,]),'expr':([18,37,42,43,53,92,],[33,58,59,33,71,33,]),'fact':([18,37,42,43,53,54,55,92,],[34,34,34,34,34,72,73,34,]),'term':([18,37,42,43,53,54,55,56,57,92,],[35,35,35,35,35,35,35,74,75,35,]),'arg':([18,24,25,37,42,43,53,54,55,56,57,62,68,92,],[36,45,46,36,36,36,36,36,36,36,36,79,80,36,]),'operand':([45,46,],[62,68,]),'function':([85,86,96,98,99,100,101,112,],[88,95,106,108,109,110,111,114,]),'else':([88,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM SEMICOLON body','program',3,'p_program','parser.py',26),
  ('body -> <empty>','body',0,'p_body','parser.py',33),
  ('body -> body sbody fbody','body',3,'p_body','parser.py',34),
  ('sbody -> var variables','sbody',2,'p_sbody','parser.py',45),
  ('var -> VAR','var',1,'p_var','parser.py',48),
  ('variables -> perem types','variables',2,'p_variables','parser.py',52),
  ('perem -> IDENTIFIER','perem',1,'p_perem','parser.py',55),
  ('perem -> IDENTIFIER COMMA perem','perem',3,'p_perem','parser.py',56),
  ('types -> COLON INTEGER SEMICOLON','types',3,'p_types','parser.py',60),
  ('types -> COLON DOUBLE SEMICOLON','types',3,'p_types','parser.py',61),
  ('fbody -> BEGIN pascalbody END DOT','fbody',4,'p_fbody','parser.py',67),
  ('pascalbody -> pascalline pascalcolons pascalbody','pascalbody',3,'p_pascalbody','parser.py',70),
  ('pascalbody -> pascalline pascalcolons','pascalbody',2,'p_pascalbody','parser.py',71),
  ('pascalcolons -> SEMICOLON','pascalcolons',1,'p_pascalcolons','parser.py',74),
  ('pascalcolons -> pascalcolons SEMICOLON','pascalcolons',2,'p_pascalcolons','parser.py',75),
  ('pascalline -> assign','pascalline',1,'p_pascalline','parser.py',78),
  ('pascalline -> func','pascalline',1,'p_pascalline','parser.py',79),
  ('pascalline -> expression','pascalline',1,'p_pascalline','parser.py',80),
  ('pascalline -> WRITE args','pascalline',2,'p_pascalline','parser.py',81),
  ('assign -> IDENTIFIER ASSIGN expr','assign',3,'p_assign','parser.py',90),
  ('expression -> for','expression',1,'p_expression','parser.py',94),
  ('expression -> if','expression',1,'p_expression','parser.py',95),
  ('expression -> while','expression',1,'p_expression','parser.py',96),
  ('expr -> fact','expr',1,'p_expr','parser.py',99),
  ('expr -> expr PLUS fact','expr',3,'p_expr','parser.py',100),
  ('expr -> expr MINUS fact','expr',3,'p_expr','parser.py',101),
  ('fact -> term','fact',1,'p_expr','parser.py',102),
  ('fact -> fact MULTIPLY term','fact',3,'p_expr','parser.py',103),
  ('fact -> fact DIVIDE term','fact',3,'p_expr','parser.py',104),
  ('term -> arg','term',1,'p_term','parser.py',111),
  ('term -> LPAREN expr RPAREN','term',3,'p_term','parser.py',112),
  ('func -> IDENTIFIER LPAREN args RPAREN','func',4,'p_func','parser.py',119),
  ('args -> <empty>','args',0,'p_args','parser.py',124),
  ('args -> expr','args',1,'p_args','parser.py',125),
  ('args -> args COMMA expr','args',3,'p_args','parser.py',126),
  ('arg -> NUMBER','arg',1,'p_arg','parser.py',137),
  ('arg -> IDENTIFIER','arg',1,'p_arg','parser.py',138),
  ('arg -> func','arg',1,'p_arg','parser.py',139),
  ('arg -> NOT','arg',1,'p_arg','parser.py',140),
  ('for -> FOR IDENTIFIER ASSIGN NUMBER TO NUMBER DO BEGIN function END','for',10,'p_for','parser.py',144),
  ('if -> IF arg operand arg THEN BEGIN function else END','if',9,'p_if','parser.py',147),
  ('else -> <empty>','else',0,'p_else','parser.py',150),
  ('else -> ELSE function','else',2,'p_else','parser.py',151),
  ('while -> WHILE arg operand arg DO BEGIN function END','while',8,'p_while','parser.py',154),
  ('operand -> AND','operand',1,'p_operand','parser.py',157),
  ('operand -> XOR','operand',1,'p_operand','parser.py',158),
  ('operand -> OR','operand',1,'p_operand','parser.py',159),
  ('operand -> BOLEE','operand',1,'p_operand','parser.py',160),
  ('operand -> MENEE','operand',1,'p_operand','parser.py',161),
  ('function -> assign SEMICOLON','function',2,'p_function','parser.py',164),
  ('function -> func SEMICOLON','function',2,'p_function','parser.py',165),
  ('function -> expression SEMICOLON','function',2,'p_function','parser.py',166),
  ('function -> WRITE args SEMICOLON','function',3,'p_function','parser.py',167),
  ('function -> assign SEMICOLON function','function',3,'p_function','parser.py',168),
  ('function -> func SEMICOLON function','function',3,'p_function','parser.py',169),
  ('function -> expression SEMICOLON function','function',3,'p_function','parser.py',170),
  ('function -> WRITE args SEMICOLON function','function',4,'p_function','parser.py',171),
  ('function -> BREAK SEMICOLON','function',2,'p_function','parser.py',172),
  ('function -> CONTINUE SEMICOLON','function',2,'p_function','parser.py',173),
]
